// Énumérations pour des valeurs fixes
enum ConsentStatus {
  PENDING
  ACCEPTED
  REFUSED
  REVOKED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum NotificationType {
  CONSENT_REQUEST
  CONSENT_ACCEPTED
  CONSENT_REFUSED
  BIOMETRIC_CONFIRMATION // Ajouté
  SYSTEM
}

// Générateur Prisma Client
generator client {
  provider = "prisma-client-js"
}

// Définition de la source de données PostgreSQL
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modèle Badge (pour une gestion plus robuste des badges)
model Badge {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  users     User[]   @relation("UserBadges")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("badge")
}

// Modèle Utilisateur
model User {
  id                  Int               @id @default(autoincrement())
  email               String            @unique
  password            String
  firstName           String? // Optionnel
  lastName            String? // Optionnel
  dateOfBirth         DateTime? // Pour calculer l'âge
  photoUrl            String? // URL de la photo de profil (optionnelle)
  stripeCustomerId    String?           @unique
  isSubscribed        Boolean           @default(false)
  subscriptionEndDate DateTime? // Date de fin d'abonnement
  score               Int               @default(0) // Score pour la gamification
  badges              Badge[]           @relation("UserBadges") // Relation many-to-many avec Badge
  consents            Consent[]         @relation("UserConsent")
  partnerConsents     Consent[]         @relation("PartnerConsent")
  notifications       Notification[]    @relation("UserNotifications")
  packConsentement    PackConsentement? // Lien vers le pack de consentements
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@map("user")
}

// Modèle Consentement
model Consent {
  id                   Int            @id @default(autoincrement())
  user                 User           @relation("UserConsent", fields: [userId], references: [id])
  userId               Int
  partner              User           @relation("PartnerConsent", fields: [partnerId], references: [id])
  partnerId            Int
  status               ConsentStatus  @default(PENDING)
  encryptedData        String // Données chiffrées du consentement
  paymentStatus        PaymentStatus  @default(PENDING)
  initiatorConfirmed   Boolean        @default(false)
  partnerConfirmed     Boolean        @default(false)
  biometricValidated   Boolean        @default(false) // Changé de Boolean? à Boolean
  biometricValidatedAt DateTime? // Horodatage de la validation biométrique
  deletedByInitiator   Boolean        @default(false) // Soft-delete pour X
  deletedByPartner     Boolean        @default(false) // Soft-delete pour Y
  archived             Boolean        @default(false) // Archivage après validation/refus
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  notifications        Notification[] @relation("ConsentNotifications")
  message              String? // Ajouté pour wizard moderne
  emoji                String? // Ajouté pour wizard moderne
  type                 String? // Ajouté pour wizard moderne

  @@map("consent")
}

// Modèle Pack de Consentements
model PackConsentement {
  id          String   @id @default(uuid())
  userId      Int      @unique
  quantity    Int // Nombre de consentements disponibles dans le pack
  purchasedAt DateTime @default(now()) // Date d'achat du pack
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

// Modèle Notification
model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int
  user      User             @relation("UserNotifications", fields: [userId], references: [id])
  type      NotificationType
  message   String
  consentId Int? // ID du consentement associé (optionnel)
  consent   Consent?         @relation("ConsentNotifications", fields: [consentId], references: [id])
  isRead    Boolean          @default(false)
  metadata  Json? // Données supplémentaires (ex. contexte de la notification)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("notification")
}
